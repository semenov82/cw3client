# -*- coding: utf-8 -*-
import logging
import re
import sys
import os
import random
from time import time, sleep
from getopt import getopt
from getpass import getpass
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError
from telethon.tl.functions.messages import GetBotCallbackAnswerRequest
logging.basicConfig(format=u'%(filename)s[LINE:%(lineno)-3s]# %(levelname)-5s [%(asctime)s] %(message)s',
                    level=logging.INFO)
logging.getLogger('telethon').setLevel(level=logging.WARNING)
api_id = 203699
api_hash = '682323eb50adf409b423d905e432d850'
cw = 265204902
game_user = 'ChatWarsBot'
phone = ''
hero_des = '/start'
atk_des = '/atk'
def_des = '/def'
last_pin = False
curret_pin = False
opts, args = getopt(sys.argv[1:], 'p:', ['phone='])
for opt, arg in opts:
    if opt in ('-p', '--phone'):
        phone = arg
try:
    nchek = os.listdir('./sessions/')
except:
    os.mkdir('./sessions/')
    nchek = os.listdir('./sessions/')
nchek1 = str(phone) + '.session'
fss = "./sessions/" + nchek1
client = TelegramClient(fss, api_id, api_hash, update_workers=3, spawn_read_thread=False,device_model='FenicuMinimalBot')
client.connect()
if not client.is_user_authorized():
    if nchek1 in nchek: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–≥–∏–Ω –∫–æ–¥
        pass 
    else:
        client.send_code_request(phone)
    try:
        client.sign_in(phone, input('–ö–æ–¥ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞: '))
    except SessionPasswordNeededError:
        pw = getpass('–î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞. '
                     '–í–≤–µ–¥–∏ –∫–æ–¥: ')
        self_user = client.sign_in(password=pw)
client.start()
# –ë–æ—Ä–µ–º—Å—è —Å –æ—à–∏–±–∫–æ–π entity 
client.get_entity(game_user)
logging.info('–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏–Ω–∞')
@client.on(events.NewMessage)
def all_messages(event):
    global hero_des
    global atk_des
    global def_des
    global last_pin
    global curret_pin
    global castle
    regen = '–°–æ—Å—Ç–æ—è–Ω–∏–µ:\n(‚öîÔ∏è–ê—Ç–∞–∫–∞|üõ°–ó–∞—â–∏—Ç–∞) (üê¢|üçÅ|üåπ|‚òòÔ∏è|ü¶á|üñ§|üçÜ)'
    regenblack = '–°–æ—Å—Ç–æ—è–Ω–∏–µ:\n(‚öóÔ∏è–í –ª–∞–≤–∫–µ)'
    regenprof = '(üê¢|üçÅ|üåπ|‚òòÔ∏è|ü¶á|üñ§|üçÜ)(.{0,50}) .+ (–¢–æ—Ä—Ç—É–≥–∏|–û–ø–ª–æ—Ç–∞|–°–∫–∞–ª—ã|–§–µ—Ä–º—ã|–ù–æ—á–∏|–ê–º–±–µ—Ä–∞|–†–∞—Å—Å–≤–µ—Ç–∞)'
    if event.message.from_id == cw:
        if re.search('\/go', event.raw_text):
            last_pin = True
            sleep(random.randint(5, 9))
            client.send_message(cw, hero_des)
            logging.info('–ö–∞—Ä–∞–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏–Ω')
        elif re.search('\/pledge', event.raw_text):
            sleep(random.randint(5, 9))
            client.send_message(cw, '/pledge')
            logging.info('–∂–º–∞–∫–∞–µ–º pledge')
        elif re.search('\/engage', event.raw_text):
            sleep(random.randint(5, 9))
            client.send_message(cw, '/engage')
            logging.info('–∂–º–∞–∫–∞–µ–º engage')
        if '–ë–∏—Ç–≤–∞ —Å–µ–º–∏ –∑–∞–º–∫–æ–≤' in event.raw_text and last_pin:
            sleep(random.randint(3, 6))
            if re.search(regen, event.raw_text):
                curret_pin = re.search(regen, event.raw_text).group(2)
                castle = re.search(regenprof, event.raw_text).group(1)
                client.send_message(cw, '/go')
                logging.info('–ü–∏–Ω –Ω–∞ {} –ø–æ—Å–ª–µ –∫–∞—Ä–∞–≤–∞–Ω–∞ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º'.format(curret_pin))
            elif re.search(regenblack, event.raw_text):
                curret_pin = '/myshop_open'
                logging.info('–°–∏–¥–∏–º –≤ –ª–∞–≤–∫–µ')
            else:
                client.send_message(cw, '/go')
                logging.info('–ü–∏–Ω–∞ –Ω–µ—Ç')
        elif '–ë–∏—Ç–≤–∞ —Å–µ–º–∏ –∑–∞–º–∫–æ–≤' in event.raw_text:
            hero_des = event.message.reply_markup.rows[1].buttons[0].text
            atk_des = event.message.reply_markup.rows[0].buttons[0].text
        if '–¢—ã –ø—ã—Ç–∞–ª—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' in event.raw_text or '–¢—ã –∑–∞–¥–µ—Ä–∂–∞–ª' in event.raw_text:
            if curret_pin and last_pin:
                sleep(random.randint(2, 4))
                if curret_pin == castle:
                    logging.info('–í—ã—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ñ –æ–±—Ä–∞—Ç–Ω–æ')
                    client.send_message(cw, def_des)
                    curret_pin = False
                    last_pin = False
                elif curret_pin == '/myshop_open':
                    logging.info('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ª–∞–≤–∫—É')
                    client.send_message(cw, curret_pin)
                    curret_pin = False
                    last_pin = False
                else:
                    logging.info('–í—ã—Å—Ç–∞–≤–ª—è–µ–º –ø–∏–Ω –æ–±—Ä–∞—Ç–Ω–æ {}'.format(curret_pin))
                    client.send_message(cw, atk_des)
                    sleep(random.randint(2, 4))
                    client.send_message(cw, curret_pin)
                    curret_pin = False
                    last_pin = False
            else:
                curret_pin = False
                last_pin = False
                logging.info('–ö–∞—Ä–∞–≤–∞–Ω –∑–∞—â–∏—â—ë–Ω')
client.idle()
